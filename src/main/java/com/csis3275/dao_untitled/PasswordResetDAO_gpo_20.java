package com.csis3275.dao_untitled;

import java.util.List;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;

import org.springframework.stereotype.Component;

import com.csis3275.model_untitled.UserRowMapper_mwi_18;

import com.csis3275.model_untitled.User_untitled;

/**
 * 
 * @author Gregory Pohlod Student ID 300311820
 * @date Oct 24, 2020
 * PasswordResetDAO_gpo_20.java
 * com.csis3275.dao_untitled
 * CSIS 3275 Group Project
 * Group Name: Untitled
 *
 * 
 * The queries here get users by their email address, their reset token, adds a reset token, and updates a users password based on the reset token
 *
 */
@Component
public class PasswordResetDAO_gpo_20 {
	JdbcTemplate jdbcTemplate;
	
	//SQL queries
	private final String SQL_GET_USER_BY_EMAIL = "SELECT * FROM users WHERE email = ?;";
	private final String SQL_GET_USER_BY_RESET_TOKEN = "SELECT * FROM users WHERE reset_token = ?;";
	private final String SQL_ADD_RESET_TOKEN_BY_EMAIL = "UPDATE users SET reset_token=? WHERE email=?;";
	private final String SQL_UPDATE_PASSWORD_BY_RESET_TOKEN = "UPDATE users SET password=?, reset_token=NULL WHERE reset_token=?;";
	

	//DAO methods
	@Autowired
	public PasswordResetDAO_gpo_20(DataSource dataSource) {
		jdbcTemplate = new JdbcTemplate(dataSource);
	}
	
	//This method used to get the user based on their email submitted on the forgotpassword form
	//returns null if email does not exist to trigger an error message.
	public User_untitled checkUserEmailExists(String email) {
		List<User_untitled> list = jdbcTemplate.query(SQL_GET_USER_BY_EMAIL, new UserRowMapper_mwi_18(), email);
		try {
			return list.get(0);
		} catch (Exception ex) {
			return null;
		}
	}
	//This method is used to update the users database entry to include a reset key generated by the controller 
	//in order to reset the users password.
	public boolean addResetTokenToUser(User_untitled user) {
		return jdbcTemplate.update(SQL_ADD_RESET_TOKEN_BY_EMAIL, user.getResetToken(), user.getEmail()) >0;
	}
	//This method used to get the user based on their resetToken from a reset email link
	//returns null if no user has that resetToken in order to trigger an error message.
	public User_untitled checkUserHasResetToken(String resetToken) {
		List<User_untitled> list = jdbcTemplate.query(SQL_GET_USER_BY_RESET_TOKEN, new UserRowMapper_mwi_18(), resetToken);
		try {
			return list.get(0);
		} catch (Exception ex) {
			return null;
		}
	}
	//This method is used to update the users password if it matches the generated reset token, it then sets the token to null since the resetToken has been used. 
	public boolean updatePasswordByResetToken(User_untitled user) {
		return jdbcTemplate.update(SQL_UPDATE_PASSWORD_BY_RESET_TOKEN, user.getHashedPassword(), user.getResetToken()) >0;
	}
}
