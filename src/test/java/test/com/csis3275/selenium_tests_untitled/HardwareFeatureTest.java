package test.com.csis3275.selenium_tests_untitled;

// Generated by Selenium IDE
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import com.csis3275.config_untitled.SpringBootApplicationInitializer_Untitled;
import com.csis3275.dao_untitled.HardwareDAO_gpo_20;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = SpringBootApplicationInitializer_Untitled.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:test-master.sql")
public class HardwareFeatureTest {
	private WebDriver driver;
	private Map<String, Object> vars;
	JavascriptExecutor js;
	
	@Autowired
	HardwareDAO_gpo_20 hardwareDAO;

	@Before
	public void setUp() {
		System.setProperty("webdriver.chrome.driver", "C:/temp/chromedriver.exe");
		driver = new ChromeDriver();
		js = (JavascriptExecutor) driver;
		vars = new HashMap<String, Object>();
	}

	@After
	public void tearDown() {
		driver.quit();
	}

	@Test
	public void hardwareFeatureTest() {
		// Test name: Hardware Feature
		// Step # | name | target | value
		// 1 | open | / |
		driver.get("http://localhost:8080/");
		// 2 | setWindowSize | 974x1040 |
		driver.manage().window().setSize(new Dimension(974, 1040));
		// 3 | click | css=.uk-button |
		driver.findElement(By.cssSelector(".uk-button")).click();
		// 4 | click | id=username |
		driver.findElement(By.id("username")).click();
		// 5 | type | id=username | employee
		driver.findElement(By.id("username")).sendKeys("employee");
		// 6 | type | id=password | e
		driver.findElement(By.id("password")).sendKeys("e");
		// 7 | sendKeys | id=password | ${KEY_ENTER}
		driver.findElement(By.id("password")).sendKeys(Keys.ENTER);
		// 8 | click | css=.uk-tab > li:nth-child(2) > a |
		driver.findElement(By.cssSelector(".uk-tab > li:nth-child(2) > a")).click();
		// 9 | click | id=title |
		driver.findElement(By.id("title")).click();
		// 10 | type | id=title | HardwareTest
		driver.findElement(By.id("title")).sendKeys("HardwareTest");
		// 11 | click | id=description |
		driver.findElement(By.id("description")).click();
		// 12 | type | id=description | To blackbox test the hardware features
		driver.findElement(By.id("description")).sendKeys("To blackbox test the hardware features");

		// 14 | select | id=category | label=Hardware
		{
			WebElement dropdown = driver.findElement(By.id("category"));
			dropdown.findElement(By.xpath("//option[. = 'Hardware']")).click();
		}
		// 15 | click | css=.uk-button-primary |
		driver.findElement(By.cssSelector(".uk-button:nth-child(2)")).click();
		// 16 | click | css=.uk-tab > li:nth-child(2) > a |
		driver.findElement(By.cssSelector(".uk-tab > li:nth-child(2) > a")).click();
		// 17 | click | css=.uk-first-column svg |
		driver.findElement(By.cssSelector(".uk-first-column svg")).click();
		// 18 | click | css=.uk-tab > li:nth-child(2) > a |
		driver.findElement(By.cssSelector(".uk-tab > li:nth-child(2) > a")).click();
		// 19 | waitForElementPresent | xpath=//a[contains(@href, '/pickUp?id=26')] |
		// 30000
		{
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(
					ExpectedConditions.presenceOfElementLocated(By.xpath("//a[contains(@href, \'/pickUp?id=26\')]")));
		}
		// 20 | click | xpath=//a[contains(@href, '/pickUp?id=26')] |
		driver.findElement(By.xpath("//a[contains(@href, \'/pickUp?id=26\')]")).click();
		// 21 | waitForElementPresent | xpath=//a[contains(@href, '#my26')] | 30000
		{
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//a[contains(@href, '#my26')]")));
		}
		// 22 | click | xpath=//a[contains(@href, '#my26')] |
		driver.findElement(By.xpath("//a[contains(@href, '#my26')]")).click();

		// 24 | select | xpath=//div[2]/div/div[2]/form[4]/div/div/select | label=Lenovo
		// Yoga 1090 Laptop
		{
			Select select = new Select(driver.findElement(By.cssSelector("#my26 #hardwareNameSelector")));
            // Desired dropdown index
            select.selectByIndex(3);
		}

		// 26 | click | css=#my26 #hardware .uk-button |
		driver.findElement(By.cssSelector(".uk-inline > #my26")).click();
		// 27 | click | css=.uk-tab > li:nth-child(4) > a |
		driver.findElement(By.cssSelector(".uk-tab > li:nth-child(4) > a")).click();
		// 28 | click | id=addNewHardware |
		driver.findElement(By.id("addNewHardware")).click();
		// 29 | click | id=hardwareTypeDescription |
		driver.findElement(By.id("hardwareTypeDescription")).click();
		// 30 | type | id=hardwareTypeDescription | Test Laptop
		driver.findElement(By.id("hardwareTypeDescription")).sendKeys("Test Laptop");
		// 31 | click | css=.uk-button-primary:nth-child(1) |
		driver.findElement(By.cssSelector("td:nth-child(3) > .uk-button-primary")).click();
		// 32 | click | css=.uk-tab > li:nth-child(5) > a |
		driver.findElement(By.cssSelector(".uk-tab > li:nth-child(5) > a")).click();
		// 33 | click | name=returnHardware |
		driver.findElement(By.name("returnHardware")).click();
		// 34 | click | css=.uk-tab > li:nth-child(5) > a |
		driver.findElement(By.cssSelector(".uk-tab > li:nth-child(5) > a")).click();
		// 35 | click | css=tr:nth-child(4) > td:nth-child(2) .uk-button |
		driver.findElement(By.cssSelector("tr:nth-child(4) > td:nth-child(2) .uk-button")).click();
	    // 36 | click | css=.uk-tab > li:nth-child(4) > a | 
	    driver.findElement(By.cssSelector(".uk-tab > li:nth-child(4) > a")).click();
	    // 37 | assertValue | id=row-reference-7-hardwareTypeDesc | Test Laptop
	    {
	      String value = driver.findElement(By.id("row-reference-7-hardwareTypeDesc")).getAttribute("value");
	      assertThat(value, is("Test Laptop"));
	    }
	    // 38 | click | css=.uk-tab > li:nth-child(5) > a | 
	    driver.findElement(By.cssSelector(".uk-tab > li:nth-child(5) > a")).click();
	    // 39 | assertValue | xpath=//td[3]/input | Returned
	    {
	      String value = driver.findElement(By.xpath("//td[3]/input")).getAttribute("value");
	      assertThat(value, is("Returned"));
	    }
	    // 40 | assertValue | xpath=//tr[3]/td[3]/input | Lost
	    {
	      String value = driver.findElement(By.xpath("//tr[3]/td[3]/input")).getAttribute("value");
	      assertThat(value, is("Lost"));
	    }
	    // 41 | assertValue | id=row-reference-9-hardwareName | Lenovo Yoga 1090 Laptop
	    {
	      String value = driver.findElement(By.id("row-reference-9-hardwareName")).getAttribute("value");
	      assertThat(value, is("Lenovo Yoga 1090 Laptop"));
	    }
	    // 42 | assertValue | id=row-reference-9-usernameAssignedTo | employee
	    {
	      String value = driver.findElement(By.id("row-reference-9-usernameAssignedTo")).getAttribute("value");
	      assertThat(value, is("employee"));
	    }
	    // 43 | mouseOver | css=div:nth-child(3) > .uk-icon-button | 
	    {
	      WebElement element = driver.findElement(By.cssSelector("div:nth-child(3) > .uk-icon-button"));
	      Actions builder = new Actions(driver);
	      builder.moveToElement(element).perform();
	    }
	    // 44 | mouseOut | css=div:nth-child(3) > .uk-icon-button | 
	    {
	      WebElement element = driver.findElement(By.tagName("body"));
	      Actions builder = new Actions(driver);
	      builder.moveToElement(element, 0, 0).perform();
	    }
	    // 45 | click | css=div:nth-child(3) > .uk-icon-button > svg | 
	    driver.findElement(By.cssSelector("div:nth-child(3) > .uk-icon-button > svg")).click();
	  }
	}
